---
title: "Urban Stream Restoration in Dresden"
subtitle: "Researching the optimal locations to restore the urban streams in order to improve the biodiversity, climate adaptivity and quality of life in the city of Dresden"
author:
  - name: "Daan Schlosser"
    affiliation: "MSc Geomatics"
  - name: "Joost Bastiaansen"
    affiliation: "MSc Urbanism"
  - name: "Aparnaa Chandrasekaran"
    affiliation: "MSc Urbanism"
  - name: "Teun van Dijk"
    affiliation: "MSc Urbanism"

format:
  html:
    number-sections: true
    fig-cap-location: bottom
    toc: true
    toc-location: left
    lightbox: true
    css: styles.css
    theme: Yeti
---

| Name                   | Affiliation   | Role                               |
|----------------------|-------------------|-------------------------------|
| Daan Schlosser         | MSc Geomatics | Project coordinator & data-analyst |
| Joost Bastiaansen      | MSc Urbanism  | Mapping specialist                 |
| Aparnaa Chandrasekaran | MSc Urbanism  | Research lead                      |
| Teun van Dijk          | MSc Urbanism  | Presentation & design lead         |

<br>

## Introduction

### Context

The ‘Interreg CENTRAL Europe’, a funding program of the European Union for regional development in tandem with climate change and digital transition, started a project, ReBioClim in 2024, focusing on the funding of urban stream restoration, aiming to promote biodiversity, climate adaptation, and improve quality of life in cities (Interreg Central Europe, 2025). This program derives from the concept of Urban Stream Syndrome, which describes the consistently observed ecological degradation of watercourses that drain urban areas, where peak discharge rates during flood events are significantly higher. At the same time, baseflow is reduced due to decreased infiltration (Walsh et al., 2005). This is caused by increased impermeable surfaces, such as roads, rooftops, and parking lots, combined with the more efficient drainage of stormwater through pipelines. The combination of increased hard surfaces and efficient drainage results in a "flashier" hydrograph, which leads to more frequent and larger flow events, with faster rising and falling water flows. This causes certain symptoms of the Urban Stream Syndrome, starting with increased bank erosion and more channel incisions. Other effects are elevated concentrations and loads of chemical pollutants and nutrients in urban stream waters. Both symptoms negatively impact biodiversity (Walsh et al., 2005). 

With climate change, the urgency to address the limitations of urban drainage systems is constantly increasing (Arnbjerg-Nielsen et al., 2013). Impact analyses of urban runoff consistently show that, in regions impacted by climate change, a systematic adaptation effort is necessary to minimise the effects on the poor performance of current drainage systems, particularly in high-risk areas such as cities located along rivers (Arnbjerg-Nielsen et al., 2013). Some studies suggest that, despite the significance of climate change, systematically adapting urban streams can mitigate the impacts of urban stream syndrome to an acceptable level, which is one of the main goals of the Urban Stream Restoration project.

### Dresden
One of the participating cities in the ReBioClim project is Dresden, located in Germany. In addition to its rich historical significance, Dresden is an important centre of trade due to its position along the River Elbe, which provides a direct connection to Hamburg. The city is also geographically linked to the Sächsische Schweiz, a mountain range renowned for its distinctive sandstone rock formations. The combination of the city’s location along the Elbe and its proximity to the elevated mountain region has resulted in an extensive network of streams, amounting to a total of 347 kilometres. This makes the city susceptible to the Urban Stream Syndrome, as well as the increased impact of climate change (Arnbjerg-Nielsen et al., 2013). 

This became apparent in 2002, when Dresden was struck by an enormous flood (Sächsisches Landesamt für Umwelt und Geologie, 2002). Over two meters of rain fell in just three days across large parts of the Osterzgebirge mountain range. This was between two and three times the average amount of rainfall for the entire month of August. Due to previous moisture and geological conditions, the ground could hardly absorb any more water and quickly became saturated. Because of the saturated soil, 60 to 90 percent of the rainfall rapidly ran off in many areas. The runoff infrastructure back then was far from sufficient to cope with this amount of runoff, resulting in substantial damage and destruction in the affected region. 

The watercourses in the urban areas were almost completely canalised, and the banks were consolidated, even beyond urban areas (Sächsisches Landesamt für Umwelt und Geologie, 2002). Dams, bridges, and other structures along the channels significantly reduced local discharge capacity. In all affected regions, these bottlenecks were identified, where the available discharge profile was completely insufficient. 

The result of this was more than a billion euros in damages as well as multiple casualties. Although the August 2002 flood had a statistical return period of 100 to 500 years, a more extensive analysis reveals that similar events could be expected at any time across all the streams studied. The analysis of the flood (Sächsisches Landesamt für Umwelt und Geologie, 2002) also indicates that the August flood was not the physically possible maximum event, meaning that future flooding events more severe than the 2002 flooding cannot be ruled out. In 2013, a similar event already occurred, where a combination of late snow melts and several wet months in spring resulted in saturated soils and filled reservoirs (KNMI - Central European Flooding 2013, z.d.). Although the magnitude of the flooding of the Elbe was less severe than in 2002, the damages and casualties were comparable. 

### Urban Stream Restoration

In order to mitigate the impact of similar future events, the Sachsen region and the city of Dresden had a high incentive to develop an integrated sustainable drainage system. To accomplish this, certain goals were set (Sächsisches Landesamt für Umwelt und Geologie, 2002). Starting by giving more space to streams, making them wider and preventing real estate development in flood-prone areas. Furthermore, the hydraulic drainage systems needed a larger discharge profile and higher attention to erosion. Lastly, there was a focus on the decentralised retention of runoff volumes, specifically by influencing the land use around the urban stream reservoirs. This would mean an ecological or recreational program instead of industrial or residential functions, to increase overflow capabilities of streams. These principles could not only be used to improve climate adaptation and increase biodiversity, but also to integrate them by improving the quality of life for surrounding residents. 

Dresden’s commitment to sustainable urban development is exemplified by its landscape plan, which envisions a "compact city within an ecological network" (Artmann et al., 2017). This approach emphasises the integration of green and blue infrastructures to improve air and water quality, reduce urban heat island effects, and bolster biodiversity. Enhancing infiltration and evapotranspiration aims to mitigate flood risks and adapt to climate change impacts. 

This goes hand in hand with the Urban Stream restoration project. In Dresden, pilot actions under this project involve stakeholder co-design workshops, restoration plans, and initial restoration activities. An example of one of these projects is Blaues Band Geberbach, where, in collaboration with the community, space is freed up to restore the stream and its surroundings (Dresden, 2025). For this project, a lot of different aspects need to be combined, including land-use, infrastructure and biodiversity. For example, the land of a horse racing track is exchanged to make way for a new cycle path. Furthermore, the construction activities are used to simultaneously install a district heating system. 

All these efforts aim to develop socially integrated solutions that balance ecological requirements with urban planning needs. However, these projects take a lot of time to develop and are very costly to do so. That is why not every stream can be restored simultaneously, and it becomes important to prioritise which locations are most suitable to start with. This leads to the following research question and sub-research questions:

**Which urban streams in Dresden have the greatest potential to contribute to the city’s integrated climate resilience?**

* Which urban streams and surrounding areas are most vulnerable to flooding due to climate change?
* Which areas along urban streams are most urgent to enhance residents’ day-to-day quality of life?
* Which stream corridors have the highest potential to support and enhance urban biodiversity?

## Methods

In order to provide an answer to the main research question, it is important to choose appropriate methods that take into account environmental, social, and economic factors (Convertino et al., 2012). To do this, clear metrics are needed to measure the impact of restoration activities at different stages of the project. These metrics are based on three main topics, in tandem with the goals of the ReBioClim project: climate resilience, quality of life, and biodiversity. A literature study is used as the basis for identifying which data is relevant to answer the sub-questions and the main research question. It also explains the importance of each topic and how they relate to each other in the datasets. 

### Site Selection
To start, a grid with tiles of 500 by 500 metres was defined for the city of Dresden, as this is considered a walkable distance. This is filtered to only show the tiles which contain a stream to remove any unnecessary information.

:::::: {layout-ncol="3"}
::: column
![500x500m grid](images/introduction/STEP1.png)
:::
::: column
![Overlaying the stream network](images/introduction/STEP2.png)
:::
::: column
![Keep only the tiles overlapping with the network](images/introduction/STEP3.png)
:::
::::::

### MCDA

To combine the data and answer the main research question, a Multi-Criteria Decision Analysis (MCDA) is used as it can help quantify non-economic objectives, communicate trade-offs, facilitate consistent and explicit valuation, and focus negotiation on ultimate objectives (Corsair et al., 2009). This method includes several steps, which are described below.

**Step 1: Data Collection and Grid Representation**  
Open-source datasets are collected and displayed on a fixed grid of 500-by-500-meter squares. Since the research focuses on finding which streams are most suitable for restoration, only the grid tiles that overlap with streams are shown in the results, as identified during the site selection process.

**Step 2: Data Normalisation**  
Next, the data is normalised so that it can be compared. This starts by checking whether a dataset represents good or bad conditions for stream restoration. This is indicated with a plus (+) for good conditions to improve, or a minus (–) when improvement is less needed. For example, streams with lots of greenery already have lower restoration potential, so a dataset showing green areas is marked with a minus (–), and vice versa.

The main part of normalisation is converting different data value ranges into a 0 to 1 scale, so that each dataset becomes a comparable layer. The normalisation process is explained in the table below.

**Step 3: Weighting the Layers**  
In this step, the different data layers are given weights based on their importance. Since this step involves some subjectivity, the literature study helps to support the choices made. The Analytic Hierarchy Process (AHP) is used to compare each dataset in a matrix, assigning weights based on their relevance to each other. To keep the process clear, data layers are only compared within their topic area: climate resilience, quality of life, or ecology. These three main topics are given equal weight, since they are all important to urban stream restoration. The matrices are shown in Figure X.

**Step 4: Combining the Results**  
Finally, the three weighted layers are combined into a single result map. The structure of the full MCDA process, including the topics, weights, and plus/minus signs, is shown in Figure X. 


### Typology Construction

Further, the project uses the Typology Construction method to systematically cluster urban streams based on similar characteristics in terms of their normalised scores obtained during the data collection in the MCDA. This cluster definition helps in creating a toolkit for urban stream restoration, which can include combinations of design and policy measures that can be applied within each cluster. It can help reduce the complexity of urban stream networks by clustering them into manageable groups, which helps optimise budgeting, planning, and monitoring. This method includes several steps, which are described below.

**Step 1. Categories for creating clusters**  
The streams are categorised into typologies based on the 15 sub-categories outlined and normalised in the S-MCDA method. For instance, streams with high sealing class, moderate infiltration, and medium biodiversity may form a distinct class. 

**Step 2. Choosing the clustering method**  
The K-means clustering method is used to identify coherent groups. Within this, the elbow method and silhouette scores are utilised to identify the optimum number of clusters with which the project should proceed. The elbow method is considered as it focuses on minimising within-cluster variance (WCSS), which aligns well to form internally coherent groups of streams that share similar physical or anthropogenic characteristics (Kail & Wolter, 2011). Following this process, the resultant ideal number of clusters is 3.

**Step 3. Priority selection**  
The cluster that corresponds with the worst-performing tiles in the overall weighted MCDA map is the urban streams in need of immediate restoration measures. The streams nearest to each cluster centroid are the most typical or "prototypical" examples of that stream type. These can serve as reference sites for understanding restoration needs or developing management templates.

**Step 4. Propose design measures**  
Addressing the specific characteristics of the prototypical examples as a starting point in the case of the worst-performing tiles with design measures that can facilitate the urban stream restoration project at that site, also serving as a pilot case for the other similar stretches of the urban streams in the same cluster.

## Results

### Quality of Life

Apart from natural aspects such as biodiversity and climate adaptation, urban streams also exert an influence on the social level. The presence of an urban stream can directly influence the quality of life for the surrounding inhabitants of the area through creating a sense of community (Riley, 2016) or it is able to improve their mental health (Vert et al., 2020).

#### Vicinity to Urban Green Space

x

::::: {layout-ncol="2"}
::: column
![Physical Health: Vicinity to Urban Green Space](images/quality_of_life/VicinityToUrbanGreenSpace.jpeg)
:::
::: column
![Physical Health: Vicinity to Urban Green Space (Gridded)](images/quality_of_life/VicinityToUrbanGreenSpace_Grid.jpeg)
:::
:::::

#### Vicinity to Streams

Vert et al., (2020) proved the positive effect of blue space on mental health. Through conducting an experiment in which subjects were assigned to spend 20 minutes at a selected environment. They either walked through blue or urban space or rested at a control site. General improvements in well-being and mood were found after walking through blue space. In order to adapt this to the city of Dresden, a dataset was used containing all addresses of Dresden. An additional layer was made which provided a point every 50 meters along a stream. With the PST, an calculation was made on the amount of points along the stream which could be reached from every address within 500 meters.

::::: {layout-ncol="2"}
::: {.column}
![Mental Health: Vicinity to Stream](images/quality_of_life/VicinityToStream.jpeg){fig-cap="Mental Health: Vicinity to Stream"}
:::
::: {.column}
![Mental Health: Vicinity to Stream (Gridded)](images/quality_of_life/VicinityToStream_Grid.jpeg){fig-cap="Mental Health: Vicinity to Stream (Gridded)"}
:::
:::::

#### Facilities

::::: {layout-ncol="2"}
::: {.column}
![General Health: Facilities](images/quality_of_life/Facilities.jpeg){fig-cap="General Health: Facilities"}
:::
::: {.column}
![General Health: Facilities (Gridded)](images/quality_of_life/Facilities_Grid.jpeg){fig-cap="General Health: Facilities (Gridded)"}
:::
:::::

#### Local Integration

::::: {layout-ncol="2"}
::: {.column}
![Accessibility: Local Integration](images/quality_of_life/LocalIntegration.jpeg){fig-cap="Accessibility: Local Integration"}
:::
::: {.column}
![Accessibility: Local Integration (Gridded)](images/quality_of_life/LocalIntegration_Grid.jpeg){fig-cap="Accessibility: Local Integration (Gridded)"}
:::
:::::

#### Appearance

::::: {layout-ncol="2"}
::: {.column}
![Accessibility: Appearance](images/quality_of_life/Covered.jpeg){fig-cap="Accessibility: Appearance"}
:::
::: {.column}
![Accessibility: Appearance (Gridded)](images/quality_of_life/Covered_Grid.jpeg){fig-cap="Accessibility: Appearance (Gridded)"}
:::
:::::

#### Saaty Matrix

![Saaty Matrix Placeholder](images/quality_of_life/placeholder.jpg)

#### Recreational Suitability

::::: {layout-ncol="2"}
::: {.column}
![Recreational Suitability](images/quality_of_life/RecreationalSuitability.png){fig-cap="Recreational Suitability"}
:::
::: {.column}
![Recreational Suitability (Gridded)](images/quality_of_life/RecreationalSuitability_Gridded.png){fig-cap="Recreational Suitability (Gridded)"}
:::
:::::

### Climate Adaptation

According to Ranta et al. (2021), if urban streams are reverted (almost) to their original state, they can serve as a nature-based solution by providing various services such as better aesthetics, air quality, leisure areas, and mitigation of climatic changes- this integration of blue-green spaces within cities. To achieve this, this project analyses the various ecological aspects and ecosystem services that need to be addressed.

#### Flood Risk

::::: {layout-ncol="2"}
::: {.column}
![Flood Risk: Soil Storage](images/climate_adaptation/1.1 Flood risk_ Analysis.jpg){fig-cap="Flood Risk: Soil Storage"}
:::
::: {.column}
![Flood Risk: MCDA Grid](images/climate_adaptation/1.2 Flood risk_ MCDA Grid.jpg){fig-cap="Flood Risk: MCDA Grid"}
:::
:::::

#### Urban Heat Island Effect

::::: {layout-ncol="2"}
::: {.column}
![Urban Heat Island: Analysis](images/climate_adaptation/2.1 UHI_ Analysis.jpg){fig-cap="Urban Heat Island: Analysis"}
:::
::: {.column}
![Urban Heat Island: MCDA Grid](images/climate_adaptation/2.2 UHI_ MCDA Grid.jpg){fig-cap="Urban Heat Island: MCDA Grid"}
:::
:::::

#### Green Cover: Green Spaces

::::: {layout-ncol="2"}
::: {.column}
![Green Cover: Green Spaces](images/climate_adaptation/3.1 Green cover_ Analysis.jpg){fig-cap="Green Cover: Green Spaces"}
:::
::: {.column}
![Green Cover: MCDA Grid](images/climate_adaptation/3.2 Green cover_ MCDA Grid.jpg){fig-cap="Green Cover: MCDA Grid"}
:::
:::::

#### Green Cover: Urban Trees

::::: {layout-ncol="2"}
::: {.column}
![Urban Trees: Analysis](images/climate_adaptation/4.1 Urban trees_ Analysis.jpg){fig-cap="Urban Trees: Analysis"}
:::
::: {.column}
![Urban Trees: MCDA Grid](images/climate_adaptation/4.2 Urban trees_ MCDA Grid.jpg){fig-cap="Urban Trees: MCDA Grid"}
:::
:::::

#### Infiltration Properties: Seepage

::::: {layout-ncol="2"}
::: {.column}
![Infiltration: Seepage Properties](images/climate_adaptation/5.1 Infiltration properties_ Analysis.jpg){fig-cap="Infiltration: Seepage Properties"}
:::
::: {.column}
![Infiltration: MCDA Grid](images/climate_adaptation/5.2 Infiltration properties_ MCDA Grid.jpg){fig-cap="Infiltration: MCDA Grid"}
:::
:::::

#### Infiltration Properties: Sealing Class

::::: {layout-ncol="2"}
::: {.column}
![Sealing Class: Analysis](images/climate_adaptation/6.1 Sealing_ Analysis.jpg){fig-cap="Sealing Class: Analysis"}
:::
::: {.column}
![Sealing Class: MCDA Grid](images/climate_adaptation/6.2 Sealing_ MCDA Grid.jpg){fig-cap="Sealing Class: MCDA Grid"}
:::
:::::

#### Saaty Matrix

![Saaty Matrix](images/climate_adaptation/Climate%20Adaptation_%20Saaty%20Matrix.jpg)

### Biodiversity

Biodiversity is important because...

#### PM10
::::: {layout-ncol="2"}
::: {.column}
![PM10 concentration](images/biodiversity/PM10.png){fig-cap="Figure X. PM10 concentration."}
:::
::: {.column}
![PM10 MCDA grid](images/biodiversity/PM10_Gridded.png){fig-cap="Figure X. PM10 MCDA grid."}
:::
:::::

#### NO₂
::::: {layout-ncol="2"}
::: {.column}
![NO2 concentration](images/biodiversity/NO2.png){fig-cap="Figure X. NO2 concentration."}
:::
::: {.column}
![NO2 MCDA grid](images/biodiversity/NO2_Gridded.png){fig-cap="Figure X. NO2 MCDA grid."}
:::
:::::

#### NDVI
::::: {layout-ncol="2"}
::: {.column}
![NDVI index](images/biodiversity/NDVI.png){fig-cap="Figure X. NDVI index."}
:::
::: {.column}
![NDVI MCDA grid](images/biodiversity/NDVI_Gridded.png){fig-cap="Figure X. NDVI MCDA grid."}
:::
:::::

#### Landscape Quality
::::: {layout-ncol="2"}
::: {.column}
![Landscape quality](images/biodiversity/LandscapeQuality.png){fig-cap="Figure X. Landscape quality."}
:::
::: {.column}
![Landscape quality MCDA grid](images/biodiversity/LandscapeQuality_Gridded.png){fig-cap="Figure X. Landscape quality MCDA grid."}
:::
:::::

#### Blue-Green Infrastructure Percentage
::::: {layout-ncol="2"}
::: {.column}
![Blue-green infrastructure percentage](images/biodiversity/BlueGreenPercentage.png){fig-cap="Figure X. Blue-green infrastructure percentage."}
:::
::: {.column}
![Blue-green MCDA grid](images/biodiversity/BlueGreenPercentage_Gridded.png){fig-cap="Figure X. Blue-green infrastructure MCDA grid."}
:::
:::::



#### Saaty Matrix

![Saaty Matrix Placeholder](images/biodiversity/placeholder.jpg)

### Map Dashboard

Still W.I.P. but if you open cmd, use 'python -m http.server' and navigate to the directory with the index.html in it, it works. Just need to figure out how to get it directly into our qmd file, haven't looked into that yet.

### Overview of the normal distribution of our layers

To display the distribution of the normalised values for all our layers used in the saaty matrices, we've made a plot which displays these.

::: {style="width:100%; text-align:center;"}
```{r echo=FALSE, warning=FALSE, message=FALSE, dpi=600}
#install.packages("sf")
#install.packages("ggplot2")
#install.packages("tidyr")
#install.packages("dplyr")

library(sf)
library(ggplot2)
library(tidyr)
library(dplyr)

# Read the geopackage
grids <- st_read("interactive map/Grid_BIO_CLI_QOL.gpkg", quiet = TRUE)


# Drop geometry and gather all columns in your specified order
features <- grids |>
  st_drop_geometry() |>
  select(
    # Individual BIO columns
    BIO_PM10, BIO_NO2, BIO_GreenBluePercentage, BIO_LandscapeQuality, BIO_NDVI,
    # Individual QOL columns
    QOL_VicinityToUrbanGreenSpaces, QOL_VicinityToStreams,
    QOL_Facilities, QOL_LocalIntegration, QOL_CoveredStreamDistance,
    # Individual CLI columns
    CLI_Infiltration, CLI_SealingClass, CLI_SoilStorage, CLI_UrbanHeatIsland, CLI_UrbanTrees
  ) |>
  pivot_longer(cols = everything(), names_to = "Feature", values_to = "Value")

# Create a category column and maintain order
features <- features |>
  mutate(
    Category = case_when(
      grepl("^BIO_", Feature) ~ "Biodiversity",
      grepl("^QOL_", Feature) ~ "Quality of Life",
      grepl("^CLI_", Feature) ~ "Climate"
    ),
    # Create a cleaner feature name for display
    Feature_Display = gsub("^(BIO_|QOL_|CLI_)", "", Feature),
    # Set factor levels to maintain your specified order
    Feature_Display = factor(Feature_Display, levels = c(
      "PM10", "NO2", "GreenBluePercentage", "LandscapeQuality", "NDVI",
      "VicinityToUrbanGreenSpaces", "VicinityToStreams", "Facilities", "LocalIntegration", "CoveredStreamDistance",
      "Infiltration", "SealingClass", "SoilStorage", "UrbanHeatIsland", "UrbanTrees"
    ))
  )

# Separate weighted values for individual plots
weighted_features <- grids |>
  st_drop_geometry() |>
  select(BIO_Weighted, QOL_Weighted, CLI_Weighted) |>
  pivot_longer(cols = everything(), names_to = "Feature", values_to = "Value") |>
  mutate(
    Category = case_when(
      Feature == "BIO_Weighted" ~ "Biodiversity",
      Feature == "QOL_Weighted" ~ "Quality of Life",
      Feature == "CLI_Weighted" ~ "Climate"
    ),
    Feature_Display = gsub("_Weighted", " (Weighted)", Feature),
    Feature_Display = gsub("^(BIO|QOL|CLI)", "\\1", Feature_Display)
  )

# All features together (individual + weighted)
all_features <- bind_rows(
  features |> select(Feature, Value, Category, Feature_Display),
  weighted_features |> select(Feature, Value, Category, Feature_Display)
) |>
  mutate(
    # Reorder to have weighted at the end of each category row (3 rows x 6 columns)
    Feature_Display = factor(Feature_Display, levels = c(
      # Row 1: BIO features + BIO weighted
      "PM10", "NO2", "GreenBluePercentage", "LandscapeQuality", "NDVI", "BIO (Weighted)",
      # Row 2: QOL features + QOL weighted
      "VicinityToUrbanGreenSpaces", "VicinityToStreams", "Facilities", "LocalIntegration", "CoveredStreamDistance", "QOL (Weighted)",
      # Row 3: CLI features + CLI weighted
      "Infiltration", "SealingClass", "SoilStorage", "UrbanHeatIsland", "UrbanTrees", "CLI (Weighted)"
    ))
  )

ggplot(all_features, aes(x = Value, fill = Category)) +
  geom_histogram(aes(y = ..density..), bins = 100, color = NA, size = 0.1, alpha = 1) +
# geom_density(color = "red", size = 0.4, fill = NA) +
  facet_wrap(~Feature_Display, scales = "free_y", ncol = 6, strip.position = "top") +
  scale_x_continuous(limits = c(-0.05, 1.05), breaks = c(0, 0.5, 1)) + 
  scale_fill_manual(values = c("Biodiversity" = "#415240", "Quality of Life" = "#765586", "Climate" = "#fbc010")) +
  labs(
    title = "The distribution of all our map layers: individual + weighted per theme",
    x = "Normalised Value",
    y = "Density",
    fill = NULL # No legend title
  ) +
  theme_minimal() +
  theme(
  strip.text = element_text(size = 7),
  axis.text = element_text(size = 7),
  axis.title = element_text(size = 8),        # smaller axis titles
  legend.text = element_text(size = 7),       # smaller legend text
  legend.title = element_text(size = 7),      # smaller legend title (if any)
  plot.title = element_text(size = 9),        # smaller plot title
  legend.position = "bottom",
  axis.ticks.x = element_line(size = 0.2)
)

```
:::

### Weighted maps per theme, and overall map

![Biodiversity index, weighted](images/weighted/BIO_Weighted.png) ![Quality of Life index, weighted](images/weighted/QOL_Weighted.png) ![Climate Adaptation index, weighted](images/weighted/CLI_Weighted.png) ![Overall suitability index, weighted](images/weighted/Overall_Weighted.png)

### K-means clustering and topology definition

::: {style="width:100%; text-align:center;"}
```{r echo=FALSE, warning=FALSE, message=FALSE}
#install.packages("sf")
#install.packages("dplyr")
#install.packages("cluster")
#install.packages("plotly")

library(sf) # for processing vector data
library(dplyr) # for selecting and transforming data
library(cluster) # for the silhouette method
library(plotly) # for 3D plot of the variables

# getwd()

grids <- st_read("interactive map/Grid_BIO_CLI_QOL.gpkg", quiet = TRUE)
# head(grids)

features <- grids |> select(BIO_Weighted, QOL_Weighted, CLI_Weighted) |> st_drop_geometry()
X_scaled <- scale(features) # Standardize (mean=0, sd=1)

# ------------------------------------------------------------------------------
# Defining the parameters and running the elbow and silhouette algorithms

# Define the range of clusters to test
k_values <- 2:9

# Initialize vectors to store inertia and silhouette scores
inertia <- numeric(length(k_values))
silhouette_scores <- numeric(length(k_values))

# Loop through each k value to compute k-means, inertia and silhouette
for (i in seq_along(k_values)) {
  k <- k_values[i]

  # Run k-means clustering with 'k' centers and 200 random starts
  km <- kmeans(X_scaled, centers = k, nstart = 200)

  # Store total within-cluster sum of squares (inertia) for elbow method
  inertia[i] <- km$tot.withinss

  # Calculate silhouette widths and store average silhouette score
  ss <- silhouette(km$cluster, dist(X_scaled))
  silhouette_scores[i] <- mean(ss[, 3])
}

# Create a data frame of results (optional, for inspection)
elbow_df <- data.frame(k = k_values, inertia = inertia)
# print(elbow_df)

# ------------------------------------------------------------------------------
# Plotting the elbow and silhouette algorithm results in the same graph

# Plot inertia on left y-axis
plot(k_values, inertia,
     type = "b",
     col = "darkblue",
     pch = 16,
     ylab = "Inertia (Total Within-Cluster Sum of Squares)",
     xlab = "Number of Clusters (k)",
     main = "Elbow Method and Silhouette Scores")

grid()

# Overlay silhouette scores on right y-axis
par(new = TRUE)
plot(k_values, silhouette_scores,
     type = "b",
     col = "darkgreen",
     pch = 17,
     axes = FALSE,
     xlab = "",
     ylab = "",
     ylim = c(min(silhouette_scores) * 0.9, max(silhouette_scores) * 1.1))

# Draw right y-axis with color
axis(side = 4, col = "darkgreen", col.axis = "darkgreen")

# Add right y-axis label with line and color
mtext("Average Silhouette Width", side = 4, line = 3, col = "darkgreen", cex=0.8)

# Add legend
legend("topright", legend = c("Inertia", "Silhouette Score"),
       col = c("darkblue", "darkgreen"), pch = c(16, 17))

# ------------------------------------------------------------------------------
# Running the k-means clustering

set.seed(0)
k <- 3 # Number of clusters, chosen based on the elbow plot/silhouette
kmeans_result <- kmeans(X_scaled, centers = k, nstart = 200) # Run k-means
grids$cluster <- as.factor(kmeans_result$cluster) # Add the cluster labels to the spatial data

# ------------------------------------------------------------------------------
# Find tiles nearest to cluster centers

# Number of nearest tiles to highlight per cluster
n_nearest <- 3

# Calculate distances from each point to its cluster center
grids$dist_to_center <- NA
grids$is_nearest <- FALSE

for (cluster_id in 1:k) {
  # Get indices of points in this cluster
  cluster_indices <- which(as.numeric(grids$cluster) == cluster_id)
  
  # Get the cluster center (in scaled space)
  cluster_center <- kmeans_result$centers[cluster_id, ]
  
  # Calculate distances from each point in this cluster to the center
  cluster_data <- X_scaled[cluster_indices, ]
  distances <- sqrt(rowSums((cluster_data - matrix(cluster_center, nrow = nrow(cluster_data), ncol = length(cluster_center), byrow = TRUE))^2))
  
  # Store distances
  grids$dist_to_center[cluster_indices] <- distances
  
  # Find n_nearest closest points
  nearest_indices <- cluster_indices[order(distances)[1:min(n_nearest, length(distances))]]
  grids$is_nearest[nearest_indices] <- TRUE
}

# ------------------------------------------------------------------------------
# Create consistent color mapping for both plots (without external packages, since they didn't work for me)

# Define Set1 colors manually (same as RColorBrewer Set1)
set1_colors <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", 
                 "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999")

# Select colors based on number of clusters
cluster_colors <- set1_colors[1:k]
names(cluster_colors) <- as.character(1:k)

# ------------------------------------------------------------------------------
# Plotting the k-means clustering results with consistent colors and red borders for nearest tiles

# Create color vector matching the order of clusters in the data
plot_colors <- cluster_colors[as.character(as.numeric(grids$cluster))]

# Create border colors: black for nearest tiles, NA for others
border_colors <- ifelse(grids$is_nearest, "black", NA)
border_widths <- ifelse(grids$is_nearest, 2, 0.5)

# Set up plotting with reduced margins and proper aspect ratio
par(mar = c(2, 1, 3, 1))  # Reduce margins: bottom, left, top, right

# Plot using base R plotting with asp=1 to maintain proper aspect ratio
plot(st_geometry(grids), 
     col = plot_colors,
     border = border_colors,
     lwd = border_widths,
     main = paste("Spatial Pattern of Urban Stream Clusters\n(Black borders show", n_nearest, "tiles nearest to each cluster center)"), 
     cex.main = 0.9,
     asp = 1)  # Maintain aspect ratio

# Add legend on the top left side, allowing overlap
legend("topleft", 
       legend = c(paste("Cluster", names(cluster_colors)), 
                  paste("Nearest", n_nearest, "to center")), 
       fill = c(cluster_colors, "white"),
       border = c(rep("black", length(cluster_colors)), "black"),
       title = "Legend",
       bty = "n",  # No box around legend
       cex = 0.8)  # Smaller text size

# ------------------------------------------------------------------------------
# Extra 3D plot using plotly with matching colors and highlighting nearest points

# Create a marker symbol vector: circle for regular points, diamond for nearest
marker_symbols <- ifelse(grids$is_nearest, "diamond", "circle")

# Create custom legend labels for the plotly plot
cluster_labels <- paste("Cluster", 1:k)
names(cluster_labels) <- as.character(1:k)

# Create the 3D plot with the same color mapping and different symbols
p <- plot_ly()

for (cluster_id in 1:k) {
  cluster_mask <- as.numeric(grids$cluster) == cluster_id

  # Regular points
  regular_mask <- cluster_mask & !grids$is_nearest
  p <- add_trace(p,
    x = features$BIO_Weighted[regular_mask],
    y = features$QOL_Weighted[regular_mask],
    z = features$CLI_Weighted[regular_mask],
    type = "scatter3d",
    mode = "markers",
    marker = list(size = 5, color = cluster_colors[as.character(cluster_id)], symbol = "circle"),
    name = paste("Cluster", cluster_id),
    showlegend = TRUE
  )

  # Nearest points
  nearest_mask <- cluster_mask & grids$is_nearest
  p <- add_trace(p,
    x = features$BIO_Weighted[nearest_mask],
    y = features$QOL_Weighted[nearest_mask],
    z = features$CLI_Weighted[nearest_mask],
    type = "scatter3d",
    mode = "markers",
    marker = list(size = 6, color = cluster_colors[as.character(cluster_id)], symbol = "diamond"),
    name = paste("Cluster", cluster_id, "(nearest)"),
    showlegend = TRUE
  )
}

# Put legend on the top left
p <- p %>% layout(
  legend = list(
    x = -0.1,  # move left
    y = 1,
    xanchor = "left",
    yanchor = "top"
  )
)

p

# Reset margins to default
par(mar = c(5.1, 4.1, 4.1, 2.1))
```
:::

## Discussion

## Conclusion

## Bibliography
